/*
在正则表达式中，如果直接给出字符，就是精确匹配
\d - 匹配一个数字
\w - 匹配一个字母或数字
\s - 匹配一个空格（也包括Tab等空白符）
.  - 匹配任意单个字符
*  - 表示匹配任意个字符（包括0个）
+  - 表示至少匹配一个字符
?  - 表示匹配0个或1个字符
{n} - 表示匹配n个字符
{n,m} - 表示匹配n到m个字符
^ - 表示行的开头
$ - 表示行的结束

例如
\d{3} 表示匹配3个数字
^\d   表示必须以数字开头
$\d   表示必须以数字结束
[0-9a-zA-Z\_]  可以匹配一个数字、字母或者下划线
[0-9a-zA-Z\_]+ 可以匹配至少由一个数字、字母或者下划线组成的字符串
A|B 匹配A或B，(J|j)ava(S|s)cript可以匹配'JavaScript'、'Javascript'、'javaScript'或者'javascript'
^js$ 整行匹配，就只能匹配'js'
*/

/*******************************************************/

//RegExp
//创建正则表达式
//方式1
//正则表达式在//之间
var re1 = /ABC\-001/;
//方式2
//创建正则表达式对象，\\转义为'\'
var re2 = new RegExp('ABC\\-001');

//使用正则表达式
var re = /^\d{3}\-\d{3,8}$/; //123-12345678，或123-123这种格式
//判断是否匹配
re.test('123-12345');//true
re.test('010-1234x'); // false





